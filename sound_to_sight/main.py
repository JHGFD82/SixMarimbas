# main.py

import os
import argparse
from sound_to_sight import (import_midi, clean_data, add_sections, calculate_note_lengths, add_measure_time,
                            assign_instrument_json, extract_positions, add_timings, create_jsons)

TPB = 480


def main(file_list, bpm, fps, tpb, sections=None, action_safe=False):
    """
    This method performs a series of operations on CSV files generated by the MIDICSV program and supplied in the
    file_list parameter. After verification, this method imports them into a DataFrame, cleans the data, adds sections,
    calculates note lengths, generates fake notes, creates a keyboard, adjusts the keyboard side,
    converts BPM to FPS, and saves the DataFrame to a CSV file.

    Parameters:
        file_list (list): A list of file paths containing MIDI files
        bpm (int): The beats per minute of the song being analyzed
        fps (int): The frames per second of the video project
        tpb (int): The ticks per beat
        sections (list): A list of sections which may indicate visual separation in video projects
        action_safe (bool): If true, the script will accommodate for the action safe zone in the video (usually 5% of
            the video's pixel resolution)

    Raises:
        FileNotFoundError: If a file is not found at the specified location.

    Returns:
        None
    """

    # FILE IMPORT
    for file in file_list:
        if not os.path.isfile(file):
            raise FileNotFoundError(
                f'Failed to open file "{file}". Please ensure that the file exists and that you have entered the '
                f'correct file name.')
    df = import_midi(file_list)

    # CLEAN DATA
    df, division, notes_per_bar = clean_data(df)

    # ADD SECTIONS
    if sections is None:
        print("No sections provided via command-line arguments.")
        sections = (input("If the music has sections you want to designate, enter their bar numbers here separated by "
                          "spaces, or simply hit enter to continue: ").split())
    df = add_sections(df, division, notes_per_bar, sections)

    # MEASURE ANALYSIS
    df = calculate_note_lengths(df)
    df = add_measure_time(df, division, notes_per_bar)

    details, timing = create_jsons(df, division, notes_per_bar)

    # EXTRACT POSITIONS

    layouts = assign_instrument_json(details)
    df = extract_positions(df, layouts)
    # df = add_timings(df, bpm, fps, tpb)
    # df.to_csv('output.csv', index=False)


# if __name__ == "__main__":
#     parser = argparse.ArgumentParser(description="Process some files.")
#     parser.add_argument("-i", "--input_files", nargs="+", help="List of files to process.")
#     parser.add_argument("-s", "--sections", nargs="+", default=None, help="List of sections (if any).")
#     parser.add_argument("-a", "--action_safe", action="store_true",
#                         help="Boolean to accommodate action safe zones in video pixel resolution")
#     parser.add_argument('-b', '--bpm', type=float, required=True, help='Beats per minute of the song')
#     parser.add_argument('-f', '--fps', type=float, required=True, help='Frames per second of the video')
#     parser.add_argument('-tpb', '--ticks_per_beat', default=TPB, type=int,
#                         help='Number of ticks per beat (default is 480)')
#     args = parser.parse_args()
#
#     main(args.input_files, args.bpm, args.fps, args.ticks_per_beat, args.sections, args.action_safe)

main(['../../Six Marimbas/Music/Six.csv'], 192, 29.97, TPB, sections=[329,676])
